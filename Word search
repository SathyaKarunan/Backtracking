79. Word Search
Medium

12185

491

Add to List

Share
Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
 

Follow up: Could you use search pruning to make your solution faster with a larger board?

Approach:
1)Backtracking is used.Once a letter is found ,we search for next letter in up,down,right,left of the board.If not found,we backtrack and search again.
2)Repeated till ans is found/end of matrix

Code:

class Solution {
public:
    bool dfs(int i,int j,int ind,vector<vector<char>>& board,string word){
    if(ind==word.size())return true;
    if(i<0||i>=board.size()||j<0||j>=board[0].size()||board[i][j]!=word[ind])
    return false;
    char t=board[i][j];
    board[i][j]='&';  boolret=dfs(i1,j,ind+1,board,word)||dfs(i+1,j,ind+1,board,word)||df  s(i,j-1,ind+1,board,word)||dfs(i,j+1,ind+1,board,word);
    board[i][j]=t;
    return ret;
    }
    
    
    bool exist(vector<vector<char>>& board, string word) {
    int m=board.size();
    int n=board[0].size();
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(board[i][j]=word[0]){
                if(dfs(i,j,0,board,word))return true;
            }
        }
    }
    return false;
    }
};
